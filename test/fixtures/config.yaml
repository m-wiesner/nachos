# nachos accepts either .tsv files, lhotse manifests, or pandas dataframe
# multivalued fields separate values with comma (,).
#
# .tsv files:
# -----------------
# Key    field1_name    field2_name    field3_name    ... 
# id     v1             v2,w2          v3             ...
#
# choices: tsv, lhotse, pandas
formats:
  - lhotse
  - tsv
  - pandas

format: lhotse

# Factor types so that the loader knows how to interpret the fields
factor_types: [str, str, float, float] 
lhotse_fields: ['speaker']
lhotse_groupby: 'recording_id'
# nachos uses a variety of splitters
# Choices: VNS, MinNodeCut, Disconnected, SpectralClustering, Random 
splitters:
  - vns
  - min_node_cut
  - disconnected
  - spectral_clustering
  - random

splitter: vns

# nachos splitters will create a training set and a held-out set. If multiple
# factor-disjoint sets are desired the splitter can be run recursively. Some
# splitters, such as the SpectralClusteringSplitter, will split into k splits. 
num_splits: 2
 
# The indices (1-indexed) of the fields, i.e., factors, that test set instances
# should not share with instances in the training set.
factor_idxs: [1]

# Weights on the arcs connecting entries that are similar according to the
# the factor in factor_idxs.
factor_weights: [1.0] 

# The indices (1-indexed) of the fields, i.e., factors, that should be matched
# in the training and teest sets according to a specified statistic.
constraint_idxs: [3]

# Weights on the contraints applied
constraint_weights: [1.0]
constraint_reduction: 'mean'
# nachos uses a number of similarity functions for splitting  
# Choices: set_intersection, boolean, cosine, gaussian 
similarity_functions_list:
  - set_intersection # multi-valued categorical fields
  - boolean # categorical fields
  - cosine # vector valued fields (supports multi-valued fields)
  - gaussian # real valued 
  - levenshtein # sequence of categorical values

# The chosen similarity functions 
similarity_functions:
  - set_intersection
  - set_intersection

# Similarity thresholds (for cosine, Gaussian, levenshtein)
cosine_thresh: 0.3
gaussian_thresh: 0.8
levenshtein_thresh: 0.8 

# nachos uses different contraints
constraints_list:
  - mean # minimize the difference in training and test set means
  - kl # minimize the forward kl divergence between train and test
  - mean_tuple # make the means of the train and test sets (val1, val2)
  - sum # minimize the difference of the sums of the train and test sets
  - sum_tuple # make the sums of the train and test sets (val1, val2)

# The chosen constraint
constraints:
  - sum_tuple

sum_tuple: [0.8, 0.2]

# Optimizer parameters
seed: 0
max_iter: 200

# VNS parameters
num_shake_neighborhoods: 2
num_search_neighborhoods: 2
max_neighbors: 1000 
check_complete: False
